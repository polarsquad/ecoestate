name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # Specify a Node.js version compatible with your project
          cache: "npm"
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json
      - name: Install Dependencies - Client
        run: npm ci --prefix client
      - name: Install Dependencies - Server
        run: npm ci --prefix server
      - name: Run ESLint - Client
        run: npm run lint --prefix client
      - name: Run ESLint - Server
        run: npm run lint --prefix server

  trivy:
    name: Trivy IaC Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'tf/'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          trivy-config: trivy-iac.yaml # Optional: if you have a trivy config file

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint # Run after lint job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: server/package-lock.json
      - name: Install Dependencies - Server
        run: npm ci --prefix server
      - name: Run Backend Tests
        run: npm test --prefix server

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint # Run after lint job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Install Dependencies - Client
        run: npm ci --prefix client
      - name: Run Frontend Tests
        run: npm test --prefix client

  build-and-push:
    name: Build and Push ${{ matrix.service }} Image
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend] # Run after both test jobs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to main branch
    strategy:
      matrix:
        include:
          - service: frontend
            context: ./client
            package_path: ./client/package.json
          - service: backend
            context: ./server
            package_path: ./server/package.json
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract version from package.json
        id: package_version
        run: echo "version=$(node -p "require('${{ matrix.package_path }}').version")" >> $GITHUB_OUTPUT
      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ecoestate/${{ matrix.service }}:${{ steps.package_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/ecoestate/${{ matrix.service }}:latest
          platforms: linux/amd64
          target: production # Target the production stage in the Dockerfile
